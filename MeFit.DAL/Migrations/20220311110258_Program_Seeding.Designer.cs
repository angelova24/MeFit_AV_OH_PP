// <auto-generated />
using System;
using MeFit.DAL.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeFit.DAL.Migrations
{
    [DbContext(typeof(MeFitDbContext))]
    [Migration("20220311110258_Program_Seeding")]
    partial class Program_Seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("TargetMuscleGroup")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("VideoURL")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Conditioning exercise in which a person squats, places the palms of the hands on the floor in front of the feet, jumps back into a push-up position",
                            Name = "Burpees",
                            TargetMuscleGroup = "Whole body",
                            VideoURL = "https://www.thephysedexpress.com/uploads/3/1/1/1/31119283/burpee_orig.gif"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Raise your heels slowly, keeping your knees extended. Pause for one second when you're standing as much on the tips of your toes as you can. Lower your heels back to the ground, returning to the starting position.",
                            Name = "Calf raises",
                            TargetMuscleGroup = "Legs",
                            VideoURL = "https://www.thephysedexpress.com/uploads/3/1/1/1/31119283/calf-raises_orig.gif"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Jump squats are bodyweight exercises characterized by leaping directly upwards at the top of the movement",
                            Name = "Jump squats",
                            TargetMuscleGroup = "Legs",
                            VideoURL = "https://www.thephysedexpress.com/uploads/3/1/1/1/31119283/jump-squats_orig.gif"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The jump lunge is an advanced variation of a basic walking lunge exercise, bumping up the intensity by adding a jump.",
                            Name = "Jumping lunges",
                            TargetMuscleGroup = "Legs",
                            VideoURL = "https://www.thephysedexpress.com/uploads/3/1/1/1/31119283/jumping-lunges_orig.gif"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Lay flat with your arms at your sides and legs stretched out next to each other, then raise those legs.",
                            Name = "Leg raises",
                            TargetMuscleGroup = "Abs",
                            VideoURL = "https://www.thephysedexpress.com/uploads/3/1/1/1/31119283/leg-raises_orig.gif"
                        });
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Achieved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.GoalWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Complete")
                        .HasColumnType("bit");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("GoalWorkout");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Disabilities")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("MedicalConditions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Disabilities = "none",
                            Height = 1.7,
                            MedicalConditions = "healthy",
                            UserId = 1,
                            Weight = 78.049999999999997
                        });
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "loose fat",
                            Name = "Get in summer shape"
                        },
                        new
                        {
                            Id = 2,
                            Category = "no gym",
                            Name = "Covid - do not leave home"
                        },
                        new
                        {
                            Id = 3,
                            Category = "beginner",
                            Name = "Conquer one's weaker self"
                        });
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseRepetitions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExerciseId = 1,
                            ExerciseRepetitions = 10
                        },
                        new
                        {
                            Id = 2,
                            ExerciseId = 2,
                            ExerciseRepetitions = 10
                        },
                        new
                        {
                            Id = 3,
                            ExerciseId = 3,
                            ExerciseRepetitions = 10
                        },
                        new
                        {
                            Id = 4,
                            ExerciseId = 4,
                            ExerciseRepetitions = 10
                        },
                        new
                        {
                            Id = 5,
                            ExerciseId = 5,
                            ExerciseRepetitions = 10
                        },
                        new
                        {
                            Id = 6,
                            ExerciseId = 1,
                            ExerciseRepetitions = 15
                        },
                        new
                        {
                            Id = 7,
                            ExerciseId = 2,
                            ExerciseRepetitions = 15
                        },
                        new
                        {
                            Id = 8,
                            ExerciseId = 3,
                            ExerciseRepetitions = 15
                        },
                        new
                        {
                            Id = 9,
                            ExerciseId = 4,
                            ExerciseRepetitions = 15
                        },
                        new
                        {
                            Id = 10,
                            ExerciseId = 5,
                            ExerciseRepetitions = 15
                        });
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContributor")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "John",
                            IsAdmin = false,
                            IsContributor = false,
                            LastName = "Doe",
                            Password = "password1234",
                            ProfileId = 1,
                            Username = "Doe.J"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "AdminUser",
                            IsAdmin = true,
                            IsContributor = false,
                            LastName = "AUser",
                            Password = "admin1234",
                            ProfileId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Contributor",
                            IsAdmin = false,
                            IsContributor = true,
                            LastName = "CUser",
                            Password = "con1234",
                            ProfileId = 1,
                            Username = "cont"
                        });
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Basic",
                            Type = "Beginner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Basic+",
                            Type = "Beginner"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Jump",
                            Type = "Competent"
                        });
                });

            modelBuilder.Entity("ProgramWorkout", b =>
                {
                    b.Property<int>("ProgramsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutsId")
                        .HasColumnType("int");

                    b.HasKey("ProgramsId", "WorkoutsId");

                    b.HasIndex("WorkoutsId");

                    b.ToTable("ProgramWorkout");

                    b.HasData(
                        new
                        {
                            ProgramsId = 1,
                            WorkoutsId = 1
                        },
                        new
                        {
                            ProgramsId = 1,
                            WorkoutsId = 2
                        },
                        new
                        {
                            ProgramsId = 2,
                            WorkoutsId = 3
                        });
                });

            modelBuilder.Entity("SetWorkout", b =>
                {
                    b.Property<int>("SetsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutsId")
                        .HasColumnType("int");

                    b.HasKey("SetsId", "WorkoutsId");

                    b.HasIndex("WorkoutsId");

                    b.ToTable("SetWorkout");

                    b.HasData(
                        new
                        {
                            SetsId = 2,
                            WorkoutsId = 1
                        },
                        new
                        {
                            SetsId = 5,
                            WorkoutsId = 1
                        },
                        new
                        {
                            SetsId = 1,
                            WorkoutsId = 2
                        },
                        new
                        {
                            SetsId = 2,
                            WorkoutsId = 2
                        },
                        new
                        {
                            SetsId = 5,
                            WorkoutsId = 2
                        },
                        new
                        {
                            SetsId = 8,
                            WorkoutsId = 3
                        },
                        new
                        {
                            SetsId = 9,
                            WorkoutsId = 3
                        });
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Goal", b =>
                {
                    b.HasOne("MeFit.DAL.Models.Domain.Profile", "Profile")
                        .WithMany("Goals")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.GoalWorkout", b =>
                {
                    b.HasOne("MeFit.DAL.Models.Domain.Goal", "Goal")
                        .WithMany("Workouts")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit.DAL.Models.Domain.Workout", "Workout")
                        .WithMany("Goals")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Profile", b =>
                {
                    b.HasOne("MeFit.DAL.Models.Domain.Address", "Address")
                        .WithOne("Profile")
                        .HasForeignKey("MeFit.DAL.Models.Domain.Profile", "AddressId");

                    b.HasOne("MeFit.DAL.Models.Domain.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("MeFit.DAL.Models.Domain.Profile", "UserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Set", b =>
                {
                    b.HasOne("MeFit.DAL.Models.Domain.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("ProgramWorkout", b =>
                {
                    b.HasOne("MeFit.DAL.Models.Domain.Program", null)
                        .WithMany()
                        .HasForeignKey("ProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit.DAL.Models.Domain.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SetWorkout", b =>
                {
                    b.HasOne("MeFit.DAL.Models.Domain.Set", null)
                        .WithMany()
                        .HasForeignKey("SetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit.DAL.Models.Domain.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Address", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Exercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Goal", b =>
                {
                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Profile", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.User", b =>
                {
                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MeFit.DAL.Models.Domain.Workout", b =>
                {
                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
